


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ; * File      : context_rvds.S
    3 00000000         ; * This file is part of RT-Thread RTOS
    4 00000000         ; * COPYRIGHT (C) 2009, RT-Thread Development Team
    5 00000000         ; *
    6 00000000         ; * The license and distribution terms for this file may
                        be
    7 00000000         ; * found in the file LICENSE in this distribution or at
                       
    8 00000000         ; * http://www.rt-thread.org/license/LICENSE
    9 00000000         ; *
   10 00000000         ; * Change Logs:
   11 00000000         ; * Date           Author       Notes
   12 00000000         ; * 2009-01-17     Bernard      first version.
   13 00000000         ; * 2012-01-01     aozima       support context switch l
                       oad/store FPU register.
   14 00000000         ; */
   15 00000000         
   16 00000000         ;/**
   17 00000000         ; * @addtogroup STM32
   18 00000000         ; */
   19 00000000         ;/*@{*/
   20 00000000         
   21 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; interrupt control
                                                             state register
   22 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ; system priority r
                                                            egister (2)
   23 00000000 00FF0000 
                       NVIC_PENDSV_PRI
                               EQU              0x00FF0000  ; PendSV priority v
                                                            alue (lowest)
   24 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; value to trigger 
                                                            PendSV exception
   25 00000000         
   26 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   27 00000000                 THUMB
   28 00000000                 REQUIRE8
   29 00000000                 PRESERVE8
   30 00000000         
   31 00000000                 IMPORT           rt_thread_switch_interrupt_flag
   32 00000000                 IMPORT           rt_interrupt_from_thread
   33 00000000                 IMPORT           rt_interrupt_to_thread
   34 00000000         
   35 00000000         ;/*
   36 00000000         ; * rt_base_t rt_hw_interrupt_disable();
   37 00000000         ; */
   38 00000000         rt_hw_interrupt_disable
                               PROC
   39 00000000                 EXPORT           rt_hw_interrupt_disable
   40 00000000 F3EF 8010       MRS              r0, PRIMASK
   41 00000004 B672            CPSID            I
   42 00000006 4770            BX               LR



ARM Macro Assembler    Page 2 


   43 00000008                 ENDP
   44 00000008         
   45 00000008         ;/*
   46 00000008         ; * void rt_hw_interrupt_enable(rt_base_t level);
   47 00000008         ; */
   48 00000008         rt_hw_interrupt_enable
                               PROC
   49 00000008                 EXPORT           rt_hw_interrupt_enable
   50 00000008 F380 8810       MSR              PRIMASK, r0
   51 0000000C 4770            BX               LR
   52 0000000E                 ENDP
   53 0000000E         
   54 0000000E         ;/*
   55 0000000E         ; * void rt_hw_context_switch(rt_uint32 from, rt_uint32 
                       to);
   56 0000000E         ; * r0 --> from
   57 0000000E         ; * r1 --> to
   58 0000000E         ; */
   59 0000000E         rt_hw_context_switch_interrupt
   60 0000000E                 EXPORT           rt_hw_context_switch_interrupt
   61 0000000E         rt_hw_context_switch
                               PROC
   62 0000000E                 EXPORT           rt_hw_context_switch
   63 0000000E         
   64 0000000E         ; set rt_thread_switch_interrupt_flag to 1
   65 0000000E 4A2A            LDR              r2, =rt_thread_switch_interrupt
_flag
   66 00000010 6813            LDR              r3, [r2]
   67 00000012 2B01            CMP              r3, #1
   68 00000014 D004            BEQ              _reswitch
   69 00000016 F04F 0301       MOV              r3, #1
   70 0000001A 6013            STR              r3, [r2]
   71 0000001C         
   72 0000001C 4A27            LDR              r2, =rt_interrupt_from_thread ;
                                                             set rt_interrupt_f
                                                            rom_thread
   73 0000001E 6010            STR              r0, [r2]
   74 00000020         
   75 00000020         _reswitch
   76 00000020 4A27            LDR              r2, =rt_interrupt_to_thread ; s
                                                            et rt_interrupt_to_
                                                            thread
   77 00000022 6011            STR              r1, [r2]
   78 00000024         
   79 00000024 4827            LDR              r0, =NVIC_INT_CTRL ; trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
   80 00000026 F04F 5180       LDR              r1, =NVIC_PENDSVSET
   81 0000002A 6001            STR              r1, [r0]
   82 0000002C 4770            BX               LR
   83 0000002E                 ENDP
   84 0000002E         
   85 0000002E         ; r0 --> swith from thread stack
   86 0000002E         ; r1 --> swith to thread stack
   87 0000002E         ; psr, pc, lr, r12, r3, r2, r1, r0 are pushed into [from
                       ] stack
   88 0000002E         PendSV_Handler
                               PROC



ARM Macro Assembler    Page 3 


   89 0000002E                 EXPORT           PendSV_Handler
   90 0000002E         
   91 0000002E         ; disable interrupt to protect context switch
   92 0000002E F3EF 8210       MRS              r2, PRIMASK
   93 00000032 B672            CPSID            I
   94 00000034         
   95 00000034         ; get rt_thread_switch_interrupt_flag
   96 00000034 4820            LDR              r0, =rt_thread_switch_interrupt
_flag
   97 00000036 6801            LDR              r1, [r0]
   98 00000038 B1B1            CBZ              r1, pendsv_exit ; pendsv alread
                                                            y handled
   99 0000003A         
  100 0000003A         ; clear rt_thread_switch_interrupt_flag to 0
  101 0000003A F04F 0100       MOV              r1, #0x00
  102 0000003E 6001            STR              r1, [r0]
  103 00000040         
  104 00000040 481E            LDR              r0, =rt_interrupt_from_thread
  105 00000042 6801            LDR              r1, [r0]
  106 00000044 B139            CBZ              r1, swtich_to_thread ; skip reg
                                                            ister save at the f
                                                            irst time
  107 00000046         
  108 00000046 F3EF 8109       MRS              r1, psp     ; get from thread s
                                                            tack pointer
  109 0000004A         
  110 0000004A                 IF               {FPU} != "SoftVFP"
  111 0000004A ED21 8B10       VSTMFD           r1!, {d8 - d15} ; push FPU regi
                                                            ster s16~s31
  112 0000004E                 ENDIF
  113 0000004E         
  114 0000004E E921 0FF0       STMFD            r1!, {r4 - r11} ; push r4 - r11
                                                             register
  115 00000052 6800            LDR              r0, [r0]
  116 00000054 6001            STR              r1, [r0]    ; update from threa
                                                            d stack pointer
  117 00000056         
  118 00000056         swtich_to_thread
  119 00000056 491A            LDR              r1, =rt_interrupt_to_thread
  120 00000058 6809            LDR              r1, [r1]
  121 0000005A 6809            LDR              r1, [r1]    ; load thread stack
                                                             pointer
  122 0000005C         
  123 0000005C E8B1 0FF0       LDMFD            r1!, {r4 - r11} ; pop r4 - r11 
                                                            register
  124 00000060         
  125 00000060                 IF               {FPU} != "SoftVFP"
  126 00000060 ECB1 8B10       VLDMFD           r1!, {d8 - d15} ; pop FPU regis
                                                            ter s16~s31
  127 00000064                 ENDIF
  128 00000064         
  129 00000064 F381 8809       MSR              psp, r1     ; update stack poin
                                                            ter
  130 00000068         
  131 00000068         pendsv_exit
  132 00000068         ; restore interrupt
  133 00000068 F382 8810       MSR              PRIMASK, r2
  134 0000006C         
  135 0000006C F04E 0E04       ORR              lr, lr, #0x04



ARM Macro Assembler    Page 4 


  136 00000070 4770            BX               lr
  137 00000072                 ENDP
  138 00000072         
  139 00000072         ;/*
  140 00000072         ; * void rt_hw_context_switch_to(rt_uint32 to);
  141 00000072         ; * r0 --> to
  142 00000072         ; * this fucntion is used to perform the first thread sw
                       itch
  143 00000072         ; */
  144 00000072         rt_hw_context_switch_to
                               PROC
  145 00000072                 EXPORT           rt_hw_context_switch_to
  146 00000072         ; set to thread
  147 00000072 4913            LDR              r1, =rt_interrupt_to_thread
  148 00000074 6008            STR              r0, [r1]
  149 00000076         
  150 00000076         ; set from thread to 0
  151 00000076 4911            LDR              r1, =rt_interrupt_from_thread
  152 00000078 F04F 0000       MOV              r0, #0x0
  153 0000007C 6008            STR              r0, [r1]
  154 0000007E         
  155 0000007E         ; set interrupt flag to 1
  156 0000007E 490E            LDR              r1, =rt_thread_switch_interrupt
_flag
  157 00000080 F04F 0001       MOV              r0, #1
  158 00000084 6008            STR              r0, [r1]
  159 00000086         
  160 00000086         ; set the PendSV exception priority
  161 00000086 4810            LDR              r0, =NVIC_SYSPRI2
  162 00000088 F44F 017F       LDR              r1, =NVIC_PENDSV_PRI
  163 0000008C F8D0 2000       LDR.W            r2, [r0,#0x00] ; read
  164 00000090 EA41 0102       ORR              r1,r1,r2    ; modify
  165 00000094 6001            STR              r1, [r0]    ; write-back
  166 00000096         
  167 00000096         ; trigger the PendSV exception (causes context switch)
  168 00000096 480B            LDR              r0, =NVIC_INT_CTRL
  169 00000098 F04F 5180       LDR              r1, =NVIC_PENDSVSET
  170 0000009C 6001            STR              r1, [r0]
  171 0000009E         
  172 0000009E         ; enable interrupts at processor level
  173 0000009E B662            CPSIE            I
  174 000000A0         
  175 000000A0         ; never reach here!
  176 000000A0                 ENDP
  177 000000A0         
  178 000000A0         ; compatible with old version
  179 000000A0         rt_hw_interrupt_thread_switch
                               PROC
  180 000000A0                 EXPORT           rt_hw_interrupt_thread_switch
  181 000000A0 4770            BX               lr
  182 000000A2 BF00            NOP
  183 000000A4                 ENDP
  184 000000A4         
  185 000000A4                 IMPORT           rt_hw_hard_fault_exception
  186 000000A4                 EXPORT           HardFault_Handler
  187 000000A4         HardFault_Handler
                               PROC
  188 000000A4         
  189 000000A4         ; get current context



ARM Macro Assembler    Page 5 


  190 000000A4 F3EF 8009       MRS              r0, psp     ; get fault thread 
                                                            stack pointer
  191 000000A8 B500            PUSH             {lr}
  192 000000AA F7FF FFFE       BL               rt_hw_hard_fault_exception
  193 000000AE F85D EB04       POP              {lr}
  194 000000B2         
  195 000000B2 F04E 0E04       ORR              lr, lr, #0x04
  196 000000B6 4770            BX               lr
  197 000000B8                 ENDP
  198 000000B8         
  199 000000B8                 END
              00000000 
              00000000 
              00000000 
              E000ED04 
              E000ED20 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\bui
ld\context_rvds.d -o.\build\context_rvds.o -Ie:\Keil\ARM\RV31\INC -Ie:\Keil\ARM
\CMSIS\Include -Ie:\Keil\ARM\Inc\ST\STM32F4xx --predefine="__MICROLIB SETA 1" -
-list=.\context_rvds.lst ..\..\libcpu\arm\cortex-m4\context_rvds.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 26 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      None
Comment: .text unused
HardFault_Handler 000000A4

Symbol: HardFault_Handler
   Definitions
      At line 187 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 186 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: HardFault_Handler used once
PendSV_Handler 0000002E

Symbol: PendSV_Handler
   Definitions
      At line 88 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 89 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: PendSV_Handler used once
_reswitch 00000020

Symbol: _reswitch
   Definitions
      At line 75 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 68 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: _reswitch used once
pendsv_exit 00000068

Symbol: pendsv_exit
   Definitions
      At line 131 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 98 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: pendsv_exit used once
rt_hw_context_switch 0000000E

Symbol: rt_hw_context_switch
   Definitions
      At line 61 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 62 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: rt_hw_context_switch used once
rt_hw_context_switch_interrupt 0000000E

Symbol: rt_hw_context_switch_interrupt
   Definitions
      At line 59 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 60 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: rt_hw_context_switch_interrupt used once
rt_hw_context_switch_to 00000072

Symbol: rt_hw_context_switch_to



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 144 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 145 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: rt_hw_context_switch_to used once
rt_hw_interrupt_disable 00000000

Symbol: rt_hw_interrupt_disable
   Definitions
      At line 38 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 39 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: rt_hw_interrupt_disable used once
rt_hw_interrupt_enable 00000008

Symbol: rt_hw_interrupt_enable
   Definitions
      At line 48 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 49 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: rt_hw_interrupt_enable used once
rt_hw_interrupt_thread_switch 000000A0

Symbol: rt_hw_interrupt_thread_switch
   Definitions
      At line 179 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 180 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: rt_hw_interrupt_thread_switch used once
swtich_to_thread 00000056

Symbol: swtich_to_thread
   Definitions
      At line 118 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 106 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: swtich_to_thread used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 21 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 79 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 168 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 24 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 80 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 169 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S

NVIC_PENDSV_PRI 00FF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 23 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 162 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 22 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 161 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: NVIC_SYSPRI2 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

rt_hw_hard_fault_exception 00000000

Symbol: rt_hw_hard_fault_exception
   Definitions
      At line 185 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 192 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: rt_hw_hard_fault_exception used once
rt_interrupt_from_thread 00000000

Symbol: rt_interrupt_from_thread
   Definitions
      At line 32 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 72 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 104 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 151 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S

rt_interrupt_to_thread 00000000

Symbol: rt_interrupt_to_thread
   Definitions
      At line 33 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 76 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 119 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 147 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S

rt_thread_switch_interrupt_flag 00000000

Symbol: rt_thread_switch_interrupt_flag
   Definitions
      At line 31 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 65 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 96 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 156 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S

4 symbols
354 symbols in table
